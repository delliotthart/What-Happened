{
    "collab_server" : "",
    "contents" : "library(FNN)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(tidyverse)\n\n\nfeature_list <- c('naturalized', 'non_citizen', 'female', 'foodstamp',\n                  'age', 'white', 'black', 'asian_pac_islander', 'multi_racial',\n                  'indig', 'hispanic', 'married', 'single', 'foreign_born',\n                  'student', 'veteran', 'moved_last_year', 'col_degree',\n                  'less_than_hs', 'grad', 'indig_land', 'farm',\n                  'med_hhinc', 'med_age', 'med_hh_val')\n\nfeature_names <- c('Naturalized Citizens', 'Non-Citizens',\n                   'Female','Foodstamp','Age (Mean)', 'White', \"Black\",\n                   'Asian-American/Pacific Islander','Multi-Racial','Indigenous',\n                   'Hispanic','Married','Single','Foreign Born', 'Students',\n                   'Veteran','Moved Last Year', 'College Degree',\n                   'Less than High School','Graduate','Indigenous Sovereign Land',\n                   'Farm Households','Income (Household)','Age (Median)','Home Value')\nnames(feature_list) <- feature_names\n\n#normFunc <- function(x){(x-mean(x, na.rm = T))/sum(x, na.rm = T)}\n\nget_election_data <- function(){\n  data <- read_csv(\"merged_final.csv\")\n  data$med_hh_val[data$med_hh_val == 9999999] <- median(data$med_hh_val)\n  outcomes <- data[,(ncol(data)-1):(ncol(data))]\n  #print(outcomes)\n  \n  features <- data[,feature_list]\n  #print(features)\n  totals <- features %>%\n    bind_rows(summarise_all(., funs(if(is.numeric(.)) sum(.) else \"Total\")))\n  totals <<- (totals[nrow(totals),])\n  data\n}\n\ndisplay_KNN <- function(K, ft_names){\n  \n  features <- feature_list[c(ft_names)]\n  Training_X <- election_data[election_data$year != 2016,c(features)]\n  #print(head(Training_X))\n  \n  Norm_X <- normalize_features(Training_X,c(features))\n  \n  print(Norm_X)\n  Training_Y <- election_data[election_data$year != 2016,'dem_two_party']\n  #print(head(Training_Y))\n  to_predict <- election_data[election_data$year == 2016,c(features)]\n  norm_predict <- normalize_features(to_predict, c(features))\n  \n  #print(typeof(to_predict))\n  eval_y <- election_data[election_data$year == 2016,'dem_two_party']\n  #print(head(eval_y))\n  #head(to_predict)\n  \n  model <- knn.reg(Norm_X, test = norm_predict,\n                   y= data.frame(Training_Y),k=K)\n  \n  plot_data = data.frame('x'=eval_y$dem_two_party,'y'=model$pred)\n  #print(plot_data)\n  fig <- ggplot(plot_data,aes(x,y)) + geom_jitter(size = 2,alpha=.5) +\n    geom_smooth() + xlab('Real Democratic Vote Share') + ylab('Predicted Democratic Vote Share') +\n    theme_minimal() + theme(text = element_text(size=20)) +\n    geom_abline(slope = 1,intercept = 0, \n                linetype='dashed', color = 'maroon', size = 1,aes(color='maroon',alpha='.4')) +\n    ylim(low=0.125,high=1)\n\n  #ggsave(filename=\"../output/r_test.png\",plot = fig)\n  \n  fig\n}\n\ndisplay_neighbors_for_county <-function(K, ft_names, county_name, state_name, display_feature){\n  if (length(ft_names) > 0 & length(display_feature)){\n   \n  #find the county of interest\n  features <- feature_list[c(ft_names)]\n  display_ft <- feature_list[display_feature]\n  training_set <- election_data[election_data$year != 2016,c(features,'dem_two_party')]\n  \n  Norm_X <- normalize_features(training_set[,c(features)], c(features))\n  \n  to_predict <- election_data[election_data$year == 2016,c(features)]\n  \n  norm_predict <- normalize_features(to_predict,c(features))\n  \n  county_index = which(election_data$year == 2016 &\n          election_data$county == county_name &\n          election_data$state == state_name)\n  \n  main_observation <<- election_data[county_index,c(features,'dem_two_party')]\n  \n  normed_main <<- normalize_features(main_observation,c(features))\n  \n  neighbors <- get.knnx(data= Norm_X, \n                        k = K, \n                        query = normed_main[c(features)])\n  \n  n_indices <- unlist(neighbors[1])\n  \n  model <- knn.reg(data.frame(training_set[,0:(ncol(training_set)-1)]), \n                   test = data.frame(main_observation[1,0:(ncol(main_observation)-1)]),\n                   y= data.frame(training_set[,'dem_two_party'],k=K))\n  \n  plot_data <- data.frame('x'=training_set[n_indices,display_ft],'y'= training_set[n_indices,'dem_two_party'])\n  #print(plot_data)\n  fig2 <- ggplot(plot_data,aes(plot_data[[display_ft]],dem_two_party)) + geom_point(alpha=.7,size=2) +\n    \n    geom_point(aes(x= unlist(main_observation[1,display_ft]),\n                   y= unlist(main_observation[1,'dem_two_party']),\n                   color= \"Real\"),size = 2) +\n    \n    geom_point(aes(x= unlist(main_observation[1,display_ft]),\n                   y= unlist(model$pred),\n                   color= \"Predicted\"\n                   ),size = 2,shape=17) +\n                                               \n    theme_minimal() + theme(text = element_text(size=20),\n                            legend.position = 'bottom'\n                            ) + \n    guides(size = FALSE,\n           shape = FALSE,\n           color=guide_legend(title=paste(\"Democratic Vote Share in \", county_name, \", \", state_name, sep = ''))) +\n  \n    ylab('Democratic Vote Share') + xlab(display_feature)\n  \n  #ggsave(filename=\"../output/r_test.png\",plot = fig2)\n  fig2\n  }\n}\n\nnormalize_features <- function(data, ft_list){\n  normed <- data\n  for (i in 1:length(ft_list)){\n    normed[,i] <- data[,i]/unlist(totals[ft_list[i]])\n  }\n  \n  normed\n}\n\nget_counties_in_state <- function(state){\n  counties = unique(election_data$county[election_data$year == 2016 & election_data$state == state])\n  counties\n}\n\nelection_data <- get_election_data()\nstate_names <- unique(election_data$state[election_data$year == 2016])\n\n\n#K <- 5\n#county_fips <- 1003\n#print(get_counties_in_state(state_name))\ntest_K <- 20\ntest_features <- c('Female','Age (Median)', 'Black')\ntest_state <- 'Alabama'\ntest_county <- 'Baldwin'\ntest_display <- 'Female'\n#display_neighbors_for_county(test_K, test_features, test_county, test_state, test_display)\n#is.numeric(unlist(election_data[1,1])[1])\n#display_KNN(test_K,test_features)\n#get_election_data()\n\n",
    "created" : 1557422041206.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "665406760",
    "id" : "280F3F28",
    "lastKnownWriteTime" : 1557422145,
    "last_content_update" : 1557422145560,
    "path" : "~/Desktop/reactive_KNN_graph/KNN.R",
    "project_path" : "KNN.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : true,
    "source_window" : "",
    "type" : "r_source"
}